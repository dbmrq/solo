#!/usr/bin/env bash

# Set default text to go before and after the user's file {{{1

before='
\documentclass{article}
\usepackage{iftex}
\ifPDFTeX
  \usepackage[T1]{fontenc}
  \usepackage[utf8]{inputenc}
  \usepackage{lmodern}
\else
  \usepackage{fontspec}
  \defaultfontfeatures{Ligatures=TeX}
\fi
\usepackage{microtype}
'
after=''

# }}}1

# Set help text {{{1

usage="
Compile TeX files that don't have a preamble

$(basename "$0") [-h] [-t template] [-e engine] [-b bib] [-p package] [-l line] file.tex

where:
    -h  show this help text
    -t  set the template
    -e  set the TeX engine
    -b  set the bibliography processing program
    -p  add specified package to preamble
    -l  add specified string as a preamble line
"

# }}}1

# Get user's options {{{1

while getopts ":t:e:b:p:l:h" opt; do
    case $opt in
        t)  template=$OPTARG;;
        e)  engine=$OPTARG;;
        b)  bibEngine=$OPTARG;;
        p)  packages+=("$OPTARG");;
        l)  lines+=("$OPTARG");;
        h) echo "$usage"; exit;;
        \?) echo "Invalid option: -$OPTARG" >&2; exit 1;;
        :)  echo "Option -$OPTARG requires an argument." >&2; exit 1;;
    esac
done
shift $(expr $OPTIND - 1 )

jobname=${1%.*}
text=$( cat "$1" )

# }}}1

# Get template {{{1

if [ -z "$template" ]; then
    regex="^% solo: ([[:alpha:]]*)"
    if [[ "$text" =~ $regex ]]; then
        template=${BASH_REMATCH[1]}
    fi
fi

if [ -r ${template}.tex ]; then
    before=$( cat ${template}.tex )
elif [ -r ${HOME}/.solo/${template}.tex ]; then
    before=$( cat ${HOME}/.solo/${template}.tex )
elif [ -r ${HOME}/.solo/default.tex ]; then
    before=$( cat ${HOME}/.solo/default.tex )
fi

if [ -r ${template}_after.tex ]; then
    after=$( cat ${template}_after.tex )
elif [ -r ${HOME}/.solo/${template}_after.tex ]; then
    after=$( cat ${HOME}/.solo/${template}_after.tex )
elif [ -r ${HOME}/.solo/default_after.tex ]; then
    after=$( cat ${HOME}/.solo/default_after.tex )
fi

# Get engine from template comment {{{2

if [ -z "$engine" ]; then
    if [[ $before = *"solo: lualatex"* ]]; then
        engine='lualatex'
    elif [[ $before = *"solo: xelatex"* ]]; then
        engine='xelatex'
    else
        engine='pdflatex'
    fi
fi

# }}}2

# Get bib engine from template comment {{{2

if [ -z "$bibEngine" ]; then
    if [[ $before = *"solo: biber"* ]]; then
        bibEngine='biber'
    elif [[ $before = *"solo: bibtex"* ]]; then
        bibEngine='bibtex'
    fi
fi

# }}}2

# }}}1

# Add packages {{{1

for package in "${packages[@]}"; do
    before="${before}"$'\n'"\usepackage{${package}}"$'\n'
done

# }}}1

# Add user's lines {{{1

for line in "${lines[@]}"; do
    before="${before}"$'\n'"${line}"$'\n'
done

# }}}1

# Add \begin and \end{document} if the user didn't {{{1

beginDocument='\begin{document}'
endDocument='\end{document}'

if [[ ! $text = *"$beginDocument"* ]]; then
    before="${before}"$'\n'"${beginDocument}"$'\n'
fi

if [[ ! $text = *"$endDocument"* ]]; then
    after="${after}"$'\n'"${endDocument}"$'\n'
fi

# }}}1

# Join everything and compile {{{1

content=$( echo "$before" && echo "$text"  && echo "$after" )
echo "$content" > test.tex

success=true

runEngine() {
    if echo "$content" | $engine --jobname $jobname &>/dev/null; then
        echo "$engine OK"
    else
        echo "Oops! There was a problem running $engine"
        success=false
    fi
}

runBibEngine() {
    if $bibEngine $jobname &>/dev/null; then
        echo "$bibEngine OK"
    else
        echo "Oops! There was a problem running $bibEngine"
        success=false
    fi
}

runEngine

if [ ! -z "$bibEngine" ]; then
    runBibEngine
    runEngine
    runEngine
fi

# }}}1

# Clean up {{{1

if [ "$success" = true ]; then
    latexmk -norc -c &>/dev/null
    if [ -w ${jobname}.bbl ]; then
        rm ${jobname}.bbl
    fi
    if [ -w ${jobname}.run.xml ]; then
        rm ${jobname}.run.xml
    fi
fi

# }}}1

# vim: set foldmethod=marker
